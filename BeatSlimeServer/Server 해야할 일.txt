같은 객체를 다루는 코드는 한 곳에 몰아놓자 

판정
	03.19
	판정을 클라이언트에서하자
	현재 의견
	- 서버의 딜레이, 네트워크 상태에 상관없이 리듬을 맞추고 움직여야 리듬 게임이다.
	- 서버의 상태에 따라 달라지면 너무 이상하다
	내 생각
	- 리듬 게임인걸 망각했다. 너무 동기화에만 신경을 썼다 자 서버 딜레이, 네트워크 상태에 상관없이 리듬을 맞추고 움직인다고 생각해보자 가능한가? 
		
	- 클라에서 리듬을 맞추고 통보만 한다면 피격 판정이 올바르게 될 수 있는건가?
		가정을 해보자 
		- 만약 서버가 할 일이 많아 로직에 딜레이가 생기기 시작했다.
		- 이미 클라이언트에서는 해당 이펙트가 모두 보이고 패링 패킷까지 보냈지만 아직 서버는 처리하지 못했다
		- 현재 서버에서는 클라의 이동만 관리하고 있으므로 클라에서는 이동만 느리게 되고 게임은 계속 진행 중이다.
		 하지만 서버는 딜레이가 계속 생기므로 게임시간을 따라가지 못하고 있다 -> 패턴을 제대로 준비하지 못하고 피격 판정이 느려진다.
			클라는 계속 게임이 진행되고 서버는 늦춰지고 있는 상태가 된다.
			이펙트는 제시간에 보이지만 피격은 늦게 되는 상태가 된다.
		-> 결국 게임시간을 서버와 클라가 맞춰 줘야 한다.
		
		다른 가정(03.20)
		- 서버 딜레이는 무조건 생기는디 이건 어째해결할텨? 조금씩 계속 누적되는 딜레이가 생길것이다. 이걸 해결할 방법을 고민해보자
		 하지만 게임시간을 맞춰주면 결국 리듬을 바꾸게 되는 것이다.
		


	지금 상태
	- 클라이언트에서 PlaySound에 생기는 딜레이를 생각 못해서 판정 오차가 있었다.
	- 이 부분을 서버에 적용하지 못해 패링 비트가 틀어져 서버에 있던 패링 판정을 클라로 가져왔다.

	하지만 PlaySound에 생기는 딜레이는 클라이언트에서만 적용하고 있다. 즉 서버에는 적용되지 않고 있는 것이다. 모든 패턴 피격이 밀릴 수 밖에 없어진다.
	이걸 해결하려면 각 클라에 생기는 딜레이를 서버에 알려줘야 하고 각 클라의 플레이어마다 적용시켜서 해야한다.
	아니지 클라에서 빼고 시작하는거지 맞춰진거지
	빼고 시작했는데 서버에는 적용이 안되니 패링이 안 맞았던거고 그래서 패링을 빼고 넘겼고
타이머 큐
	- 포인터를 담는 걸로 바꿀까? 이점이 뭐가 있을까 생각해보자
패턴
	패턴을 이벤트로 등록해서 사용하기 때문에 게임 중 딜레이를 줄이려면 이 부분을 잘 만들어야됨
	** 보스는 공격하고 바로 이동 금지!! 피격관련된 문제임
	- (22.03.04)현재 상태
		
		- 게임이 시작하면 모든 패턴을 이벤트에 등록함
		- 문제점
			- 플레이어가 모두 죽을 경우 의미없는 이벤트가 계속 발생
			- 플레이어가 중간에 나갈 경우 의미없는 이벤트가 계속 발생
			- 모든 플레이어가 나갈 경우 오류 발생
		- 해결 방법
			- 게임 룸마다 현재 패턴 진행사항을 저장해 한 개의 패턴이 완료되면 그 다음 패턴을 이벤트로 등록하도록 한다.
				- timer thread말고 worker thread에서 이벤트를 등록하자 priority_queue::push가 log n의 시간이 걸릴 테니
			- 예상되는 문제점
				- 단일 블록 공격 패턴의 경우 같은 시간에 저장될 수 있는데, 게임 룸이 많아지면 딜레이가 생길 것이다. 
					-> 같은 시간에 있는 패턴은 합쳐서 진행할 수 없을까?
					-> 만약 같은 시간에 있는 패턴을 합친다면 이벤트 간 최소 간격은 bpm에 따라 결정 될 것이다.
				
				- 패턴간의 시간 텀이 짧으면 한 개의 패턴이 완료되기 전에 그 다음 패턴을 이벤트로 등록해야될 것이다.
					-> 이벤트 큐에서 꺼내자 마자 바로 다음 이벤트를 등록하자
	- (22.03.08)
		- 패링 패턴이 가끔씩 박자가 밀림
			- 비트 표시기의 경우 클라이언트에서 자체적으로 읽어서 표시함
			 즉 서버 클라이언트의 게임 시작시간이 다르면 밀릴 수 있다.
			 
		**아래의 문제를 해결하면 동시에 해결될 문제라고 생각( 이펙트와 피격을 맞추기 위해 서버와 클라이언트간의 게임 플레이 타임의 동기화가 필요할 것이기 때문)
		
		- (03.12)기존 서버에서 패턴의 시작시간과 피격결과를 알려주던 걸 클라이언트에서 패턴 시작시간을 파일에서 읽어와 이펙트를 출력하고 서버에서는 피격판정만 하도록하자
			- 이렇게 하는 이유
				-> 패턴의 시작시간은 비쥬얼을 보여줘 플레이어가 피할 수 있도록 하는 것이 목표이다. 즉 비쥬얼이 필요없는 서버에서는 굳이 처리할 필요가 없는 동작인 것이다.
			- 구현하기 위해 필요한 것들
				- 서버와 클라이언트 인 게임 플레이 시간 동기화 
					- server에서 game_start패킷을 보낼 때 현재 서버시간도 같이 보낸다 -> 인게임 클라이언트들이 같은 서버 start time을 알게 된다. -> 클라 머신에서의 system시간과 비교해 각 머신에서 시작 시간..
					- 하지만 start time을 알게 됐다 한들 뭐 할 수 있는게 없음 이 정보를 가지고 음악 재생 위치를 옮겨야 하고 패턴 이펙트를 올바른 시간에 출력해야함
					- 그렇게 하려면 서버에서 계속 경과시간을 보내야함
				- 클라이언트에서 패턴 파일 읽고 이펙트 출력
				- 서버의 패턴 시작시간 이벤트 삭제
			- 예상되는 문제점
				- 클라이언트가 중간에 나간다면? 죽는다면? 해당 클라이언트의 플레이어를 공격하는 패턴의 경우는 어떤 방식으로 처리해야 할까?
				     -> 인 게임에 있는 모든 클라이언트는 다른 클라이언트가 나가거나 죽으면 알 수 있다.
					이 맵에서 체력이 제일 많거나 적은 플레이어를 알 수 있다.
					이런 정보들은 클라이언트를 해킹하지 않는 이상 서버와 클라가 같은 값을 찾을 수 있도록 해줄 것이다. 
					만약 클라이언트를 해킹해 패턴을 바꾼다고 해도 피격판정은 서버에서 처리하기 때문에 자신만 손해를 보게 될 것이다.
					? 하지만 해킹의 목적이 그냥 게임 클리어라면? -> 패턴을 모두 알고있기 때문에 매크로를 만들 수 있음 -> 이건 모든 리듬게임에 포함되는 문제아닌가?
						- 패턴의 시작시간을 알려준다해도 매크로를 사용하면 모든 공격을 피할 수 있긴함
						* 이 문제는 로직의 문제가 아니라 리듬게임의 문제가 아닐까 생각, 다음에 다시 생각해보자
				- 서버가 느려지면 모든 클라이언트가 다 느려져야하는건가? 리듬게임인데?
					- 서버 안 느려지게 만들면 되지 클라가 느려지면.. 생각해보자
				- ...해보자
			
스킬
	스킬 레벨에 따라...

DB
	...

스크립트
	lua를 사용해 각 패턴 타입에 맞는 공격 함수 호출


클라이언트
	- (22.03.11)플레이어
		- 게임이 시작한 플레이어는 remove되야함 해결할 것
	-  (22.03.14)서버는 이미 게임을 시작했고 패킷을 받고 뒤늦게 시작하는 클라가 서버의 시작시간을 따라가야 한다.
           클라에서 생기는 지연시간
           	- 패킷 오가는 시간
            	- ping 패킷을 이용해 최근 주고받은 핑10개의 평균을 낸 시간을 구할 수 있도록 만든다.
          	- 게임 start 패킷을 받고 PlaySound를 할 때 걸리는 시간
            	- offsetTimed이라는 변수에 PlaySound를 할 때 걸리는 시간을 계산한다.

	- 22.03.15) 문제점
		- 장판을 못피함
			- 클라에서 눈으로 보여지는 이펙트와 서버에서 피격 판정을 하는 시간이 안 맞는 이유 뿐이겠지
			- peekpattern이 제시간에 잘 동작하는가? -> update가 fixed라 제 시간동작이 어렵겠는걸? -> 아닌걸?
				눈에 보이는 위치는 피해졌음 -> 서버에서의 플레이어 좌표 이동도 완료된 상태라는 뜻
				장판이 커지는 크기와 플레이어가 피격되는 시간은 동일함 
					
			- (03.16)원인 발견 및 해결
				- 서버에서 피격판정을 할 때 클라이언트의 위치를 읽어서 판정을 함, 이펙트를 보고 피했는데 피격판정은 피한 클라이언트의 위치를 가지고 하는 상황
				 이걸 해결하기 위해 플레이어에게 prePos를 추가해 이펙트의 speed시간 이전에 이동한 적이 있으면 그 위치를 기준으로 피격 판정을 하도록 만들었다.
				 이펙트의 speed는 리듬게임이기 때문에 리듬에 맞춰서 결정된다.

			
            	ping 평균과 offsetTimed을 nowSongTime에 더하여 현재 패턴의 진행 사항을 조정한다.
         	 ** 음악의 재생위치도 조정해야할까?
	// 게임 시작시간만 알고있으면 경과시간은 필요 없다고 판단됨
        // 서버가 렉이 걸린다해도 경과시간(시스템시간)은 일정하게 지나갈것이고 그건 클라이언트에서 시간을 측정해도 똑같은 결과를 얻을 수 있음
        // 서버의 렉을 판정하려면 ping test패킷을 보내 패킷을 다시 받는데 걸리는 시간을 측정해 딜레이 시간을 계산하는 것이 옳은 방법이라 생각
	
	-(03.17) 게임 종료 판정 기준 변경
		- 플레이어가 죽으면 다른 아이디를 찾아 패턴을 넘겨주던 방식이 게임성을 해친다고 판단 -> 한 명이 죽으면 너무 어려워지고 패링 패턴이 곂칠 수 있음
		- 한 명이라도 죽거나 종료하면 인던을 끝내기로함 -> 힐 캐릭터 역할의 중요성 증가
		
		구현하기 위해 필요한 것들
			- 서버의 disconnect_client함수를 이용해 종료한 플레이어를 찾는다.
			- 피격 판정, 패링 공격 성공 여부를 판단할 때 체력이 감소되고 이 때 죽는 플레이어를 찾아 한 명이라도 죽으면 pattern을 등록하지 말고 게임 end패킷을 보낸다.
			- 한 명이 나간경우, 죽은 경우, 보스를 죽여서 게임이 끝난 경우, 음악 시간이 다되서 게임이 끝난 경우를 나눠서 판단한다.

		예상되는 문제점
			- 없음


플레이어 충돌
	- (03.19)더미 클라이언트를 만들기 위해 일단 플레이어 충돌을 구현해 시야에 보이는 플레이어의 수를 줄이기로 했음
	- 구현해야할 사항
		- 멀티 스레드에서 안전하게 돌아갈 플레이어들 위치를 저장한 자료구조
	- map에 플레이어의 위치까지 표시하는건 어떨까
		-> 각 인던은 mapinfo에서 맵 정보를 받아와 충돌 체크를 하기때문에 map에 플레이어의 위치까지 표시하지 못할 것 같다.
		-> 새로운 자료구조가 필요
		-> game_room 자료구조마다 map을 가지고 있어야겠다. 그런데 굳이 이걸 나눴어야 됐을까?
		-> 겨우 플레이어 3명 충돌 처리하려고 인던마다 맵을 가지는건 아닌거 같음 캐시도 그렇고 포인터 연산은 캐시랑 관련이 없나?

	구현
	- 이동은 리듬게임이기 때문에 속도에 제한이 있다. 인던에 플레이어는 3명뿐이다. 인던에서는 3명과 충돌을 했는지만 판단하자
	- 필드에서는 같은 map을 사용하니 이걸 이용해 충돌 검사를하자 atomic int 배열로 하면 되나? 잘 모르겠다 이부분은 질문을 해보는게; 좋겠다 정리해보자
		-> 어짜피 메모리에 쓰이는 값은 1아님 0이다 이게 다중 스레드를 사용해 잘린다 해도 0아님 1인거다 우리 게임에서 필드 내에서 충돌이 크게 중요한가?
		  크게 안중요하니 그냥 int로 해보고 그뒤에 수정하자






